package com.example.workmanagersample.presentation.worker

import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import android.os.Build
import android.util.Log
import androidx.core.app.NotificationCompat
import androidx.work.Worker
import androidx.work.WorkerParameters
import com.example.workmanagersample.R
import com.example.workmanagersample.domain.usecase.GetRandomQuotesBackgroundUseCase
import dagger.hilt.android.qualifiers.ApplicationContext
import javax.inject.Inject
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

class QuoteWorker @Inject constructor(
    @ApplicationContext private val context: Context,
    private val workerParams: WorkerParameters,
    private val getRandomQuotesBackgroundUseCase: GetRandomQuotesBackgroundUseCase
) :
    Worker(context, workerParams) {
    override fun doWork(): Result {
        CoroutineScope(Dispatchers.IO).launch {
            try {
                createNotification(
                    "Background Task",
                    "This notification is generated by workManager"
                )
                getRandomQuotesBackgroundUseCase.invoke(
                    this,
                    params = Unit,
                    onSuccess = {},
                    onFailure = {}
                )
            } catch (e: Exception) {
                e.printStackTrace()
                Log.e("QuoteWorker", "doWork: ${e.stackTraceToString()}")
            }
        }
        return Result.success()
    }

    fun createNotification(title: String, description: String) {
        var notificationManager =
            applicationContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val notificationChannel =
                NotificationChannel("101", "channel", NotificationManager.IMPORTANCE_DEFAULT)
            notificationManager.createNotificationChannel(notificationChannel)
        }

        val notificationBuilder = NotificationCompat.Builder(applicationContext, "101")
            .setContentTitle(title)
            .setContentText(description)
            .setSmallIcon(R.drawable.ic_launcher_background)

        notificationManager.notify(1, notificationBuilder.build())
    }
}
