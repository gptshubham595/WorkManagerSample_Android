package com.example.workmanagersample.presentation.worker

import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import android.os.Build
import android.util.Log
import androidx.core.app.NotificationCompat
import androidx.hilt.work.HiltWorker
import androidx.work.CoroutineWorker
import androidx.work.WorkerParameters
import com.example.workmanagersample.R
import com.example.workmanagersample.domain.usecase.GetRandomQuotesBackgroundUseCase
import dagger.assisted.Assisted
import dagger.assisted.AssistedInject
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

@HiltWorker
class QuoteWorker @AssistedInject constructor(
    @Assisted private val context: Context,
    @Assisted private val workerParams: WorkerParameters,
    private val getRandomQuotesBackgroundUseCase: GetRandomQuotesBackgroundUseCase
) :
    CoroutineWorker(context, workerParams) {

    override suspend fun doWork(): Result {
        return withContext(Dispatchers.IO) {
            try {
                createNotification(
                    "Background Task",
                    "This notification is generated by WorkManager"
                )
                // Use the suspend function properly within the coroutine
                getRandomQuotesBackgroundUseCase.invoke(
                    scope = this,
                    params = Unit,
                    onSuccess = {},
                    onFailure = {}
                )
                Result.success()
            } catch (e: Exception) {
                Log.e("QuoteWorker", "doWork failed: ${e.stackTraceToString()}")
                Result.failure()
            }
        }
    }

    fun createNotification(title: String, description: String) {
        var notificationManager =
            applicationContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val notificationChannel =
                NotificationChannel("101", "channel", NotificationManager.IMPORTANCE_DEFAULT)
            notificationManager.createNotificationChannel(notificationChannel)
        }

        val notificationBuilder = NotificationCompat.Builder(applicationContext, "101")
            .setContentTitle(title)
            .setContentText(description)
            .setSmallIcon(R.drawable.ic_launcher_background)

        notificationManager.notify(1, notificationBuilder.build())
    }
}
